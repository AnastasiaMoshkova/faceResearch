cmake_minimum_required (VERSION 2.8)
project (FaceRegistration)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/modules/")

find_package( OpenCV REQUIRED )
MESSAGE("OpenCV information:") 
MESSAGE("  OpenCV_INCLUDE_DIRS: ${OpenCV_INCLUDE_DIRS}") 
MESSAGE("  OpenCV_LIBRARIES: ${OpenCV_LIBRARIES}") 
MESSAGE("  OpenCV_LIBRARY_DIRS: ${OpenCV_LIBRARY_DIRS}") 
include_directories( ${OpenCV_INCLUDE_DIRS} )
MESSAGE("  OpenCV_LIBRARIES: ${OpenCV_LIBRARIES}") 

SET (BOOST_ROOT "lib/3rdParty/boost/boost_1_59_0")
SET (BOOST_INCLUDEDIR "lib/3rdParty/boost/boost_1_59_0/boost")
SET (BOOST_LIBRARYDIR "lib/3rdParty/boost/boost_1_59_0/lib64-msvc-14.0")

find_package( Boost 1.5.9 REQUIRED COMPONENTS filesystem system)
MESSAGE("Boost information:") 
MESSAGE("  Boost_INCLUDE_DIRS: ${Boost_INCLUDE_DIRS}") 
MESSAGE("  Boost_LIBRARIES: ${Boost_LIBRARIES}") 
MESSAGE("  Boost_LIBRARY_DIRS: ${Boost_LIBRARY_DIRS}") 
#-----------------------------------------------
#INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
#INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS}/boost)
#LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})	
MESSAGE("  Boost_LIBRARIES: ${Boost_LIBRARIES}") 

#SET (TBB_ROOT_DIR "E:/OpenFace_dlib/OpenFace-OpenFace_v0.2/lib/3rdParty/tbb/")
#SET (TBB_INCLUDE_DIR "E:/OpenFace_dlib/OpenFace-OpenFace_v0.2/lib/3rdParty/tbb/include")
#SET (TBB_LIBRARY "E:/OpenFace_dlib/OpenFace-OpenFace_v0.2/lib/3rdParty/tbb/lib")
#SET (TBB_ROOT_DIR "C:/Program Files (x86)/IntelSWTools/compilers_and_libraries_2018.1.156/windows")
#SET (TBB_DIR "E:/EXeFiles/tbb2018_20171205oss")
#SET (TBB_DIR "E:/OpenFace_dlib/OpenFace-OpenFace_v0.2/lib/3rdParty/tbb")
#SET (TBB_ROOT_DIR "E:/OpenFace-OpenFace_v0.2/lib/3rdParty/tbb")
#SET (TBB_INCLUDE_DIR "E:/OpenFace-OpenFace_v0.2/lib/3rdParty/tbb/include")
#SET (TBB_LIBRARY "E:/OpenFace-OpenFace_v0.2/lib/3rdParty/tbb/lib")

#SET (TBB_ROOT_DIR "E:/project_face_registration/lib/3rdParty/tbb/")
SET (TBB_INCLUDE_DIR "lib/3rdParty/tbb/include")
SET (TBB_LIBRARY_DIR "lib/3rdParty/tbb/lib/intel64/vc14")
SET (TBB_ARCH_PLATFORM "x64")
SET (TBB_DIR "lib/3rdParty/tbb")
set(_TBB_LIB_NAME "tbb" "tbb_debug")
find_library(TBB_LIBRARY        ${_TBB_LIB_NAME}        ${TBB_LIBRARY_DIR} NO_DEFAULT_PATH)
find_package(TBB REQUIRED)
#--------
#INCLUDE_DIRECTORIES(${TBB_INCLUDE_DIR})
#LINK_DIRECTORIES(${TBB_LIBRARIES})
#------------
#LINK_DIRECTORIES( ${TBB_LIBRARY} )

MESSAGE("  LIBRARYPATH: ${tbb_lib_path}") 
MESSAGE("  TBB_INCLUDE_DIR: ${TBB_INCLUDE_DIR}") 
MESSAGE("  TBB_LIBRARY: ${TBB_LIBRARY}") 
MESSAGE("  TBB_LIBRARIES: ${TBB_LIBRARIES}") 
#MESSAGE("  TBB_ROOT_DIR: ${TBB_DIR}")
#target_link_libraies(loadtbb ${TBB_LIBS})

# Move LandmarkDetector model
file(GLOB files "lib/local/LandmarkDetector/model/*.txt")
foreach(file ${files})
	if (MSVC)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/Debug/model)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/Release/model)
	else(MSVC)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/model)
	endif(MSVC)
endforeach()

# Move the hierarchical LandmarkDetector models
file(GLOB files "lib/local/LandmarkDetector/model/model*")
foreach(file ${files})
	if (MSVC)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/Debug/model)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/Release/model)
	else(MSVC)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/model)
	endif(MSVC)
endforeach()

file(GLOB files "lib/local/LandmarkDetector/model/detection_validation/*.txt")
foreach(file ${files})
	if (MSVC)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/Debug/model/detection_validation)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/Release/model/detection_validation)
	else(MSVC)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/model/detection_validation)
	endif(MSVC)
endforeach()

file(GLOB files "lib/local/LandmarkDetector/model/patch_experts/*.txt")
foreach(file ${files})
	if (MSVC)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/Debug/model/patch_experts)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/Release/model/patch_experts)
	else(MSVC)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/model/patch_experts)
	endif(MSVC)
endforeach()

file(GLOB files "lib/local/LandmarkDetector/model/pdms/*.txt")
foreach(file ${files})
	if (MSVC)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/Debug/model/pdms)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/Release/model/pdms)
	else(MSVC)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/model/pdms)
	endif(MSVC)
endforeach()

# Move OpenCV classifiers
file(GLOB files "lib/3rdParty/OpenCV3.2/classifiers/*.xml")
foreach(file ${files})
	if (MSVC)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/Debug/classifiers)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/Release/classifiers)
	else(MSVC)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/classifiers)
	endif(MSVC)
endforeach()

# Move AU prediction modules
file(GLOB files "lib/local/FaceAnalyser/AU_predictors/*.txt")
foreach(file ${files})
	if (MSVC)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/Debug/AU_predictors)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/Release/AU_predictors)
	else(MSVC)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/AU_predictors)
	endif(MSVC)
endforeach()

# Move AU prediction modules
file(GLOB files "lib/local/FaceAnalyser/AU_predictors/svr*")
foreach(file ${files})
	if (MSVC)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/Debug/AU_predictors)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/Release/AU_predictors)
	else(MSVC)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/AU_predictors)
	endif(MSVC)
endforeach()

# Move AU prediction modules
file(GLOB files "lib/local/FaceAnalyser/AU_predictors/svm*")
foreach(file ${files})
	if (MSVC)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/Debug/AU_predictors)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/Release/AU_predictors)
	else(MSVC)
		file(COPY ${file} DESTINATION ${CMAKE_BINARY_DIR}/bin/AU_predictors)
	endif(MSVC)
endforeach()

if (${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
    execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_VERSION)
    if (GCC_VERSION VERSION_LESS 4.7)
        set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -msse -msse2 -msse3")
    else ()
        set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -msse -msse2 -msse3")
    endif ()
else ()
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -msse -msse2 -msse3")
endif ()

# Boost----------------------------------------
#if(WIN32)
	#include_directories(lib/3rdParty/boost)
	#include_directories(lib/3rdParty/boost/boost)
	#link_directories( ${PROJECT_SOURCE_DIR}/lib/3rdParty/boost/lib )
#else()
	#INCLUDE_DIRECTORIES(${BOOST_INCLUDE_DIR})
#endif()

# dlib
#include_directories(lib/3rdParty/dlib)

# dlib library
add_subdirectory(lib/3rdParty/dlib/dlib)
#add_subdirectory(lib/3rdParty/dlib-19.7/dlib)

# LandmarkDetector library
add_subdirectory(lib/local/LandmarkDetector)
# Facial Expression analysis library
add_subdirectory(lib/local/FaceAnalyser)
add_subdirectory(lib/local/FaceLandmarkImg)
add_subdirectory(lib/local/faceReclibrary)
# executables
#add_subdirectory(exe/FaceLandmarkImg)
#add_subdirectory(exe/FaceLandmarkVid)
#add_subdirectory(exe/FaceLandmarkVidMulti)
#add_subdirectory(exe/FeatureExtraction)
add_subdirectory(exe/test2)
add_subdirectory(exe/PrCLR)
add_subdirectory(exe/Emotion)
